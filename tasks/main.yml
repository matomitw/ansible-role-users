---
- name: Gather OS specific variables
  ansible.builtin.include_vars: "{{ loop_vars }}"
  loop: "{{ query('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distro }}-{{ ansible_distro_version }}.yml"
        - "{{ ansible_distro }}-{{ ansible_distro_release }}.yml"
        - "{{ ansible_distro }}-{{ ansible_distro_major_version }}.yml"
        - "{{ ansible_distro }}.yml"
        - "{{ ansible_os_family | lower }}-family.yml"
        - "{{ ansible_system | lower }}.yml"
      paths:
        - "vars"
      skip: true
  loop_control:
    loop_var: loop_vars

- name: "Update APT cache"
  ansible.builtin.apt:
    update_cache: true
  tags:
    - molecule-idempotence-notest
  when:
    - ansible_pkg_mgr == "apt"

# install packages
- ansible.builtin.include_tasks: install.yml

# create users and groups
- ansible.builtin.include_tasks: manage_groups.yml
  loop: "{{ users | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
- ansible.builtin.include_tasks: manage_users.yml
  loop: "{{ users | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

# configure user's profile
- ansible.builtin.include_tasks: configure_bash.yml
  loop: "{{ users | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.state|default("present") != "absent"
- ansible.builtin.include_tasks: configure_ssh.yml
  loop: "{{ users | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.state|default("present") != "absent"
- ansible.builtin.include_tasks: configure_vim.yml
  loop: "{{ users | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.state|default("present") != "absent"
- ansible.builtin.include_tasks: configure_profile.yml
  loop: "{{ users | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.state|default("present") != "absent"
